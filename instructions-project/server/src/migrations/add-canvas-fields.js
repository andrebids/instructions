import sequelize from '../config/database.js';
import { QueryTypes } from 'sequelize';

/**
 * Migration: Add canvas fields to projects table
 * Adiciona campos para dados do canvas (AI Designer) √† tabela projects
 * 
 * Esta migration adiciona os seguintes campos:
 * - canvasDecorations: Array de decora√ß√µes geradas pelo AI Designer
 * - canvasImages: Array de imagens adicionadas ao canvas
 * - snapZonesByImage: Objeto com zonas de snap por imagem { 'image-id': { day: [], night: [] } }
 * - decorationsByImage: Objeto com decora√ß√µes por imagem { 'image-id': [...] }
 * 
 * Uso: npm run migrate
 */
async function migrate() {
  try {
    console.log('üîÑ Iniciando migration: Adicionar campos de canvas ao projeto...');
    console.log('üìÖ Data:', new Date().toISOString());
    
    // Testar conex√£o com a base de dados
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com base de dados estabelecida');
    
    // Verificar se os campos j√° existem
    const checkColumnsQuery = `
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'projects' 
      AND column_name IN ('canvasDecorations', 'canvasImages', 'snapZonesByImage', 'decorationsByImage');
    `;
    
    const existingColumns = await sequelize.query(checkColumnsQuery, {
      type: QueryTypes.SELECT
    });
    
    const existingColumnNames = existingColumns.map(col => col.column_name);
    console.log('üìã Colunas existentes:', existingColumnNames.length > 0 ? existingColumnNames : 'Nenhuma');
    
    // Adicionar campos que n√£o existem
    const fieldsToAdd = [
      {
        name: 'canvasDecorations',
        type: 'JSONB',
        defaultValue: "'[]'::jsonb",
        description: 'Array de decora√ß√µes geradas pelo AI Designer'
      },
      {
        name: 'canvasImages',
        type: 'JSONB',
        defaultValue: "'[]'::jsonb",
        description: 'Array de imagens adicionadas ao canvas'
      },
      {
        name: 'snapZonesByImage',
        type: 'JSONB',
        defaultValue: "'{}'::jsonb",
        description: 'Zonas de snap por imagem: { "image-id": { "day": [], "night": [] } }'
      },
      {
        name: 'decorationsByImage',
        type: 'JSONB',
        defaultValue: "'{}'::jsonb",
        description: 'Decora√ß√µes por imagem: { "image-id": [...] }'
      }
    ];
    
    var addedCount = 0;
    var skippedCount = 0;
    
    for (var i = 0; i < fieldsToAdd.length; i++) {
      var field = fieldsToAdd[i];
      if (!existingColumnNames.includes(field.name)) {
        var alterQuery = `
          ALTER TABLE projects 
          ADD COLUMN "${field.name}" ${field.type} DEFAULT ${field.defaultValue};
        `;
        
        await sequelize.query(alterQuery);
        console.log(`‚úÖ Campo "${field.name}" adicionado com sucesso (${field.description})`);
        addedCount++;
      } else {
        console.log(`‚è≠Ô∏è  Campo "${field.name}" j√° existe, pulando...`);
        skippedCount++;
      }
    }
    
    console.log('\nüìä Resumo da migration:');
    console.log(`   ‚úÖ Campos adicionados: ${addedCount}`);
    console.log(`   ‚è≠Ô∏è  Campos j√° existentes: ${skippedCount}`);
    console.log(`   üìã Total de campos: ${fieldsToAdd.length}`);
    console.log('\nüéâ Migration conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante migration:', error);
    console.error('Stack:', error.stack);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Executar migration
migrate()
  .then(() => {
    console.log('‚úÖ Migration executada com sucesso');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erro ao executar migration:', error);
    process.exit(1);
  });

