name: Deploy (dev) via SSH

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          echo "üîë Verificando chave SSH escrita..."
          echo "Tamanho do ficheiro: $(wc -c < ~/.ssh/id_deploy) bytes"
          echo "Primeiras linhas:"
          head -n 2 ~/.ssh/id_deploy
          echo "√öltimas linhas:"
          tail -n 2 ~/.ssh/id_deploy
          echo "Tentando extrair chave p√∫blica..."
          ssh-keygen -y -f ~/.ssh/id_deploy 2>&1 | head -n 1 || echo "‚ö†Ô∏è N√£o foi poss√≠vel extrair chave p√∫blica (formato pode estar incorreto)"
        shell: bash
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Add remote host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
        shell: bash

      - name: Garantir rsync no servidor
        run: |
          echo "üì¶ Verificando se rsync est√° instalado no servidor..."
          ssh -i ~/.ssh/id_deploy -p "${{ secrets.SSH_PORT }}" -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "command -v rsync >/dev/null 2>&1 || (sudo apt-get update -y && sudo apt-get install -y rsync)" || echo "‚ö†Ô∏è N√£o foi poss√≠vel instalar rsync"
        shell: bash

      - name: Rsync c√≥digo para o servidor
        run: |
          echo "üîë Verificando chave SSH..."
          ls -la ~/.ssh/id_deploy || echo "‚ö†Ô∏è Chave SSH n√£o encontrada"
          echo "üîç Testando conex√£o SSH..."
          ssh -i ~/.ssh/id_deploy -p "${{ secrets.SSH_PORT }}" -o StrictHostKeyChecking=no -o ConnectTimeout=10 "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "echo 'SSH connection OK'" || echo "‚ö†Ô∏è SSH test falhou"
          
          RSYNC_EXCLUDES=(
            ".git/"
            "**/node_modules/"
            "**/.next/"
            "**/dist/"
            "**/build/"
          )
          EXCLUDE_ARGS=""
          for e in "${RSYNC_EXCLUDES[@]}"; do EXCLUDE_ARGS+=" --exclude=$e"; done
          
          echo "üì§ Iniciando rsync..."
          rsync -avz --delete $EXCLUDE_ARGS \
            -e "ssh -i ~/.ssh/id_deploy -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no -o LogLevel=VERBOSE" \
            "${GITHUB_WORKSPACE}/" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_PATH }}/" || {
            echo "‚ùå Rsync falhou!"
            echo "Tentando debug SSH..."
            ssh -i ~/.ssh/id_deploy -p "${{ secrets.SSH_PORT }}" -v "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "echo test" || true
            exit 1
          }
        shell: bash

      - name: Deploy completo no servidor
        run: |
          ssh -i ~/.ssh/id_deploy -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" bash << REMOTE_SCRIPT
          set -e
          set -x
          REMOTE_PATH="${{ secrets.REMOTE_PATH }}"
          # Expandir ~ para caminho absoluto se necess√°rio
          if [[ "\$REMOTE_PATH" == ~* ]]; then
            REMOTE_PATH="\${REMOTE_PATH/#\~/\$HOME}"
          fi
          cd "\$REMOTE_PATH"
          echo "üìç Diret√≥rio atual: $(pwd)"
          
          # 1. Garantir Docker, Docker Compose e rsync
          echo "üê≥ Verificando Docker..."
          if ! command -v docker >/dev/null 2>&1; then
            echo "Instalando Docker..."
            curl -fsSL https://get.docker.com | sh
          fi
          if ! docker compose version >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then 
              echo "Instalando Docker Compose..."
              sudo apt-get update -y 
              sudo apt-get install -y docker-compose-plugin
            fi
          fi
          echo "üì¶ Verificando rsync..."
          if ! command -v rsync >/dev/null 2>&1; then
            echo "Instalando rsync..."
            sudo apt-get update -y
            sudo apt-get install -y rsync || echo "‚ö†Ô∏è Falha ao instalar rsync"
          fi
          
          # 2. Subir Postgres via Docker Compose
          echo "üêò Subindo Postgres..."
          docker compose -f instructions-project/docker-compose.dev.yml up -d --pull always || echo "‚ö†Ô∏è Docker Compose pode ter falhado, mas continuando..."
          
          # 3. Instalar depend√™ncias do client e fazer build
          echo "üì¶ Fazendo build do frontend..."
          cd instructions-project/client
          npm ci --omit=dev || npm install --omit=dev || echo "‚ö†Ô∏è npm install falhou, mas continuando..."
          npm run build || { echo "‚ùå Build do frontend falhou!"; exit 1; }
          
          # 4. Instalar depend√™ncias do server
          echo "üì¶ Instalando depend√™ncias do servidor..."
          cd ../server
          npm ci --omit=dev || npm install --omit=dev || echo "‚ö†Ô∏è npm install falhou, mas continuando..."
          
          # 5. Garantir que .env existe (preservar se j√° existir - n√£o sobrescrever se existir)
          # NOTA: As chaves Clerk devem ser configuradas manualmente no servidor no ficheiro .env
          if [ ! -f .env ]; then
            printf "DB_HOST=localhost\nDB_PORT=5433\nDB_NAME=instructions_demo\nDB_USER=demo_user\nDB_PASSWORD=demo_password\nPORT=5000\nNODE_ENV=production\n" > .env
            echo "‚ö†Ô∏è Ficheiro .env criado. Por favor configure CLERK_PUBLISHABLE_KEY e CLERK_SECRET_KEY manualmente."
          fi
          
          # 6. Garantir que client/.env existe (preservar se j√° existir)
          # NOTA: A chave Clerk deve ser configurada manualmente no servidor
          if [ ! -f instructions-project/client/.env ]; then
            echo "# VITE_CLERK_PUBLISHABLE_KEY deve ser configurado aqui" > instructions-project/client/.env
            echo "‚ö†Ô∏è Ficheiro client/.env criado. Por favor configure VITE_CLERK_PUBLISHABLE_KEY manualmente."
          fi
          
          # 7. Reiniciar servidor Node.js via PM2
          echo "üîÑ Reiniciando servidor Node.js..."
          cd instructions-project/server
          if command -v pm2 >/dev/null 2>&1; then
            pm2 restart instructions-server --update-env 2>/dev/null || pm2 start "node src/app.js" --name instructions-server --cwd . || true
            pm2 save 2>/dev/null || true
          else
            echo "‚ö†Ô∏è PM2 n√£o encontrado. Instalando..."
            sudo npm i -g pm2 || true
            pm2 start "node src/app.js" --name instructions-server --cwd . || true
            pm2 save 2>/dev/null || true
          fi
          
          # 8. Recarregar Nginx para servir novos ficheiros
          echo "üîÑ Recarregando Nginx..."
          sudo systemctl reload nginx || true
          
          # 9. Verificar se servi√ßos est√£o a correr
          echo "üîç Verificando status dos servi√ßos..."
          docker ps --filter "name=postgres" --format "table {{.Names}}\t{{.Status}}" || true
          pm2 list | grep instructions-server || echo "‚ö†Ô∏è PM2 processo n√£o encontrado"
          
          echo "‚úÖ Deploy conclu√≠do com sucesso!"
          echo "üìç Timestamp: $(date)"
          REMOTE_SCRIPT
        shell: bash
      
      - name: Verificar health do servidor
        run: |
          sleep 5
          curl -f http://${{ secrets.SSH_HOST }}/health || echo "‚ö†Ô∏è Health check falhou - servidor pode ainda estar a iniciar"
        continue-on-error: true


